/**
 * @author fb25
 *
 */
package com.tescoplay.service;

import java.util.List;
import java.util.concurrent.TimeUnit;

import com.couchbase.client.java.AsyncBucket;
import com.couchbase.client.java.Bucket;
import com.couchbase.client.java.CouchbaseCluster;
import com.couchbase.client.java.env.CouchbaseEnvironment;
import com.couchbase.client.java.env.DefaultCouchbaseEnvironment;
import com.tesco.dbtest.config.ApplicationConfig;

import rx.Observable;

public class ConnectionBuilder {

	
	private static Bucket bucket = null;

	private ConnectionBuilder() {

	}

	
	public static Bucket getBucket() {

		if (cluster == null) {

			CouchbaseEnvironment env = DefaultCouchbaseEnvironment.builder().kvTimeout(60000).connectTimeout(60000).computationPoolSize(16)
					.build();

			List<String> couchbaseAddresses = getAppConfig().getCouchbaseHostAddresses();

			cluster = CouchbaseCluster.create(env, couchbaseAddresses);
		}

		if (bucket == null) {
			if (getAppConfig().isCouchaseAuthRequired()) {
				bucket = cluster.openBucket(getAppConfig().getCouchabseBucketName(), getAppConfig().getCouchbasePassword(), 1,
						TimeUnit.MINUTES);
			} else {
				bucket = cluster.openBucket(getAppConfig().getCouchabseBucketName(), 1, TimeUnit.MINUTES);
			}
		}

		return bucket;

	}

	public static void closeBucket() {

		if (bucket != null) {
			bucket.close();
		}

		if (cluster != null) {
			cluster.disconnect();
		}

	}

	public static void closeAsyncBucket() {

		if (asyncBucket != null) {
			Observable<Boolean> closeBucket = asyncBucket.close();
			closeBucket.subscribe();
		}

		if (asyncCluster != null) {
			Observable<Boolean> closeCluster = asyncCluster.disconnect();
			closeCluster.subscribe();
		}

	}

	public static void closeAsyncBucket(AsyncBucket asyncBucket) {

		if (asyncBucket != null) {
			Observable<Boolean> closeBucket = asyncBucket.close();
			closeBucket.subscribe();
		}

	}

	public static CouchbaseCluster getCluster() {
		return cluster;
	}

	public static void setCluster(CouchbaseCluster cluster) {
		ConnectionBuilder.cluster = cluster;
	}

	public static ApplicationConfig getAppConfig() {
		return appConfig;
	}

	public static void setAppConfig(ApplicationConfig appConfig) {
		ConnectionBuilder.appConfig = appConfig;
	}

	public static void setBucket(Bucket bucket) {
		ConnectionBuilder.bucket = bucket;
	}

}
