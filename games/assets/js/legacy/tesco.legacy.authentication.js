/*!
    Tesco
    Authentication JavaScript for Tesco sites

    Revision properties generated by SVN keywords
    ---------------------------------------------
    $Rev:: 364                          $:  Revision of last commit
    $Author:: geopat                    $:  Author of last commit
    $Date:: 2010-10-28 12:46:16 +0100 (#$:  Date of last commit

    JSDoc notation

    @version 0.1
    @author LBi - http://www.lbi.co.uk
    @requires jQuery Core 1.4+ - http://www.jquery.com/
*/

TESCO.extend( 'Authentication', {

	init: function(){
		if($('.reg-auth, .filter-category, .req-auth').length){
			this.authenticate();
		}
	},

	authenticate: function(){
		// Do not run client side authentication when these inputs are clicked.
		var submitExclusions = $('.couponblock input[type=submit], .giftcardblock input[type=submit], .header input[type=submit],.storefinder-resultstable input[type=submit], .buy-box-stock-alerts input[type=submit]');

		// custom validation methods
		$.validator.addMethod('postalcode', function(value){
			return (/^(((([A-PR-UWYZ][0-9][0-9A-HJKS-UW]?)|([A-PR-UWYZ][A-HK-Y][0-9][0-9ABEHMNPRV-Y]?))\s{0,2}[0-9]([ABD-HJLNP-UW-Z]{2}))|(GIR\s{0,2}0AA))$/i).test(value);
			//Below code is the another example which will match the UK postal codes with lower and upper case formats
			//return (/^([Gg][Ii][Rr] 0[Aa]{2})|((([A-Za-z][0-9]{1,2})|(([A-Za-z][A-Ha-hJ-Yj-y][0-9]{1,2})|(([A-Za-z][0-9][A-Za-z])|([A-Za-z][A-Ha-hJ-Yj-y][0-9]?[A-Za-z])))) {0,1}[0-9][A-Za-z]{2})$/).test(value);
		}, 'Please enter a valid Postcode');
		
		$.validator.addMethod('postalcodepca', function(value){
			value = value.replace(/\s+/g, "");
			return (/^([a-zA-Z0-9]+\s?)*$/i).test(value);
		}, 'Please enter a valid postcode');
		
		$.validator.addMethod('couponcode', function(value, element){
			if(element.value == ''){
				return false;
			}
			else{
				return true;
			}
		}, 'Please enter a valid eCoupon or Clubcard voucher code');
		
		
		$.validator.addMethod('ageverification', function(value, element){
			var day = $('.age-confirmation #dobday').val();
			var month = $('.age-confirmation #dobmonth').val();
			var year = $('.age-confirmation #dobyear').val();
			var min_age = 18;
			var birthday = new Date(year, month-1, day);
			var currDate = new Date();
			var millisPerYear = 1000 * 60 * 60 * 24 * 365;
			var age = ((currDate.getTime()) - birthday.getTime()) / millisPerYear;
			if(age < 18){
				 return false;
		   } else{
				return true;
			}
		}, 'You must be over the age of 18 to purchase some items in your basket');

		$.validator.addMethod("telnumber", function(phone_number, element) {
		    phone_number = phone_number.replace(/\s+/g, "");
			return this.optional(element) || /^0\d{9,10}$/.test(phone_number);
		}, "Please enter a valid phone number");

		$.validator.addMethod("telmobile", function(phone_number, element) {
		    phone_number = phone_number.replace(/\s+/g, "");
			return this.optional(element) || /^07\d{9}$/.test(phone_number);
		}, "Please enter a mobile phone number with 11 digits, and starting with 07."); 
		
		$.validator.addMethod("namechk", function(name_field, element) {
			name_field = name_field.replace(/\s+/g, "");
			
			if(name_field !=="" && name_field !==null){
				if(this.optional(element) || /<|>/.test(name_field)){
				    return false;
				}
			}
			return true;
		}, "Please enter your name using letters a to z and hyphen (-) only. Surname can also use apostrophe (').");
		
		$.validator.addMethod("newNameChk", function(name_field, element) {
			name_field = name_field.replace(/\s+/g, "");
			return this.optional(element) || /^[a-zA-Z'-]*$/.test(name_field);
		}, "Please enter your name using letters a to z and hyphen (-) only. Surname can also use apostrophe (').");

		$.validator.addMethod("firstNameField", function(name_field, element) {
			name_field = name_field.replace(/\s+/g, "");
			return this.optional(element) || /^[a-zA-Z-]*$/.test(name_field);
		}, "Please enter your name using letters a to z and hyphen (-) only. Surname can also use apostrophe (').");

		$.validator.addMethod("screenName", function(screenName_field, element) {
			screenName_field = screenName_field.replace(/\s+/g, "");
			return this.optional(element) || /^[a-zA-Z0-9`!$%\^\*\(\)\-_=\+\{\};&amp;:@'~#?\\| ]*$/.test(screenName_field);
		}, "We do not accept commas, double quote marks or angle brackets in screen name. Please add your screen name again without these characters.");

		
		$.validator.addMethod("neighNnamechk", function(neighname_field, element) {
			neighname_field = neighname_field.replace(/\s+/g, "");
			var neighDiv =$('div.form-field div').hasClass('delSplDiv');
			alert(neighDiv);
			if(neighDiv.style.display=="block" && neighname_field !=="" && neighname_field !==null){
				if(this.optional(element) || /<|>/.test(neighname_field)){
				    return false;
				}
			}
			return true;
		}, "Please enter your name using letters a to z and hyphen (-) only. Surname can also use apostrophe (').");

		$.validator.addMethod("rangecheck", function(){
			if(($('#to1').val() > $('#from1').val()) &&  ($('#to1').val()>0) && ($('#from1').val()>0)){
				$('#price-range label[generated="true"]').remove();
				$('#to1').removeClass('invalid focus').addClass('valid');
			}
			return true;
		}, "Please ensure that the max value is greater than the min value");

		// method that check to see whether the daytime telephone number is different from the evening telephone number
		$.validator.addMethod("notEqualTo", function (value, element, param) {
			// if the numbers are equal, return true, which is not what we want
			return this.optional(element) || value != $(param).val();
		}, "You have entered two telephone numbers that are the same. Please enter two different numbers.");

		// ensure that the credit card number is in the past
		$.validator.addMethod("expirydate", function() {
			var month = parseInt($("#expirydatemonth").val());
			var year = parseInt($("#expirydateyear").val());
			var today = new Date();
			if (year < today.getFullYear()) {
				return false;
			} else if (year == today.getFullYear() && month <= (today.getMonth() + 1)) {
				return false;
			}
			return true;
		}, "Sorry, you can only use a card which has an expiry date of at least one month in the future.");
		
		// added for seller claims
		$.validator.addMethod("telclaim", function(claim_number, element) {
		    claim_number = claim_number.replace(/\s+/g, "");
			if(!isNaN(claim_number)){
				if(claim_number < 0){
				return false;
				}
			}else{
			return true;
			}
		}, "Please enter the correct claim value"); 
		 
		 $.validator.addMethod("calimval", function(claim_number, element) {
            claim_number = claim_number.replace(/\s+/g, "");
                  return this.optional(element) || /^[+]?([0-9]+(?:[\.][0-9]*)?|\.[0-9]+)$/.test(claim_number);
            }, "Please enter a valid claim number");

		 $.validator.addMethod("dateChk", function(curr_date, element) {
				return this.optional(element) || /\b\d{1,2}[\/-]\d{1,2}[\/-]\d{4}\b/.test(curr_date);
		 }, "Please enter the correct date"); 
		 
		 
		// ensure that the credit card expiry fields have been chosen
        $.validator.addMethod("expiryRequired", function() {
            var month = parseInt($("#expirydatemonth").val());
            var year = parseInt($("#expirydateyear").val());
            if (isNaN(year) || isNaN(month)) {
                return false;
            }
            return true;
            
        }, "Please select both an expiry month and year.");
        
        $('#expirydatemonth, #expirydateyear').click(function(){
        	var month = parseInt($("#expirydatemonth").val(),10);
			var year = parseInt($("#expirydateyear").val());
			var today = new Date();
			$('#expirylabel').remove();	
			var label_Cont = document.createElement( 'label' );
			$(label_Cont ).attr('id', 'expirylabel');
			label_Cont.innerHTML = "<span></span>Sorry, you can only use a card which has an expiry date of at least one month in the future";
			$(label_Cont).addClass('invalid');
			
			if (year == today.getFullYear() && month <= (today.getMonth() + 1)) {
				$('#expiryDiv').append(label_Cont);
			}
			else{
			$('#expirylabel').remove();	
			}
			return true;
		});

        $.validator.addMethod("clubcardnumber", function(clubcard_number, element) {
			if (!$("#noclubcard").length || ($("#noclubcard").length && $("#noclubcard").is(":not(':checked')"))) {
				clubcard_number = clubcard_number.replace(/\s+/g, "");
				return /^(\d{16}|\d{18})$/.test(clubcard_number);
			}
			return true;
		} , "Please enter a valid Clubcard number - it's 16 or 18 digits."); 
		
		$.validator.addMethod('enhancedPassword', function(value, element) {
			var regexp = /(?=^.{8,15}$)((?=.*\d)(?=.*[a-z])(?=.*[A-Z])|(?=.*\d)(?=.*[a-z])(?=.*[£!#$%&()*+,\-.\/:;<=>?@[\]^_{|}~])|(?=.*\d)(?=.*[A-Z])(?=.*[£!#$%&()*+,\-.\/:;<=>?@[\]^_{|}~])|(?=.*[a-z])(?=.*[A-Z])(?=.*[£!#$%&()*+,\-.\/:;<=>?@[\]^_{|}~]))^.*/,
				isValid = regexp.test(value.replace(/\s/g, ''));
			return isValid;
		}, "Your password must contain three of the following: <br /> - One uppercase character <br /> - One lowercase character <br /> - One special character e.g. !, ?, £, $, # <br /> - One number");

		// Multipart form submission
		$('.multipart-validation .req-auth input[type=submit], .multipart-validation .reg-auth input[type=submit]').click(function(){
			var excludes = 'input[type=text], input[type=checkbox], input[type=radio], select';
			if($(this).closest('fieldset').hasClass('multipart') === true){
				$(excludes).removeClass('ignore');
				$(this).closest('form').find(excludes).not('.multipart input').addClass('ignore');
			} else{
				$(excludes).removeClass('ignore');
				$('.multipart').find(excludes).addClass('ignore');
			}
		});

		$('input[type="submit"]').not(submitExclusions).click(function(){
			var me = $(this);
			// append the page error mark up block to the page
			// local reference to dom elements
			var header = $('h1'),
				siblingParas = header.siblings('p:last');
			// the placement of the error mark up changes slightly across the site, so logic is needed
			// first check whether or not the page error mark-up exists, if it does not, append the mark up
			
			var formID = $(this).closest('form').attr('id');
			
			if ($('#' + formID).hasClass('no-generic-message') == false) {
				if(!$('.page-error').length){
					if(siblingParas.length){
						// if there are paragraph elements after the h1 insert the error mark up after the p elements
						siblingParas.after('<div class="page-error"><p>There is 1 error that requires your attention before you can proceed</p></div>');
					} else{
						// otherwise just insert the error mark up after the h1 element
						header.after('<div class="page-error"><p>There is 1 error that requires your attention before you can proceed</p></div>');
					}
				}
			}

			insertTooltip = function(){
				$('.reg-auth label.invalid, .req-auth label.invalid').prepend('<span></span>');
			};
			/*rangeError = function() {
			    var error = $('#price-range label[generated="true"]');
			    if (error.length) {
			        var minVal = $('#from1').val().length;
			        var maxVal = $('#to1').val().length;
			        if(error.length && minVal > 0 && maxVal > 0){
			            $('.submit-error').html('<p>Please ensure that the max value is greater than the min value</p>');
			        }
			    }
			};*/
			
			var oldPassMax,
				oldPassMin;
			if ($("#change-password").length) {
				oldPassMax = 15;
				oldPassMin = 6;
			} else if ($("#change-email").length) {
				oldPassMax = 15;
				oldPassMin = 6;				
			}
			
			$('#' + formID).validate({
				onkeyup: function(element){
					if($(element).attr('name') != 'password'){
						return false;
					}
				},
				errorClass: 'invalid',
				errorElement: 'label',
				errorContainer: '.page-error',
				errorPlacement: function(error, element){
					if (element.attr('name') == 'expirydatemonth' || element.attr('name') == 'expirydateyear') {
						error.appendTo(element.closest('.form-field'));
					} else {
						error.appendTo(element.parent());
					}
				},
				ignore: '.ignore',
				messages: {
					'cardissue': {
						minlength: 'Issue number should be a three digit number',
						maxlength: 'Issue number should be a three digit number',
						digits: 'Please enter the card issue number. It\'s a two digit number on the front of the card'
					},
					'cardseccode-new': {
						required: 'Please enter a security code.',
						digits: 'Sorry, the security code must contain numbers only.'
					},
					'login-email': {
						required: 'Sorry, we don\'t think this is a valid email address. Please try again.'
					},
					'login-password':'Please enter your password.',
					'register-email': {
						required: 'Please enter your email address.',
						email: 'Please enter a valid email address'
					},
					'register-emailconfirm': {
						required: 'Please confirm your email address.',
						equalTo: 'The email addresses you entered don\'t match. Please check them and try again.'
					},
					'password': {
						required: 'Please enter a password.',
						minlength: 'Please enter a password between ' + $("#your-details #hdnPasswordLength").data('min') + ' and ' + $("#your-details #hdnPasswordLength").data('max') + ' characters',
						maxlength: 'Please enter a password between ' + $("#your-details #hdnPasswordLength").data('min') + ' and ' + $("#your-details #hdnPasswordLength").data('max') + ' characters'						
					},
					'currentpassword': {
						required: 'Please enter your password.'
					},
					'oldpass': {
						required: 'Please enter your password.',
						minlength: 'Please enter a password between ' + oldPassMin + ' and ' + oldPassMax + ' characters',
						maxlength: 'Please enter a password between ' + oldPassMin + ' and ' + oldPassMax + ' characters'
					},
					'newpass': {
						required: 'Please enter your new password.',
						minlength: 'Please enter a password between ' + $("#change-password #hdnnewpassLength").data('min') + ' and ' + $("#change-password #hdnnewpassLength").data('max') + ' characters',
						maxlength: 'Please enter a password between ' + $("#change-password #hdnnewpassLength").data('min') + ' and ' + $("#change-password #hdnnewpassLength").data('max') + ' characters',
						enhancedPassword: "Your password needs to include three of the follow: <br /> - One uppercase character <br /> - One lowercase character <br /> - One special character e.g. !, ?, &pound;, $, # <br /> - One number"
					},
					'confirmpass': {
						required: 'Please confirm your password.',
						equalTo: 'Sorry, the passwords entered aren\'t the same, please try again.'
					},
					'confirmnewpass': {
						required: 'Please confirm your new password.',
						equalTo: 'Sorry, the passwords entered aren\'t the same, please try again.'
					},
					'new-email': {
						required: 'Please enter your new email address.'
					},
					'confirm-email': {
						required: 'Please confirm your new email address.',
						equalTo: 'Sorry, the email you have entered aren\'t the same, please try again.'
					},
					'clubcard': {
						required: 'Please enter your Clubcard number or tick the box below if you don\'t have one.'
					},
					/*'itemnumber': {
						required: 'Please enter the item number.'
					},*/
					'clubcardnumber': {
						required: 'Please enter your club card number.'
					},
					'creditCardNumber': {
						required: 'Please enter your credit card number.'
					},
					'noclubcard': {
						required: 'You\'ve entered a Clubcard number, but have indicated that you don\'t have one. Please untick the box or clear the Clubcard number field.'
					},
					'no-mobile': {
						required: 'You\'ve entered a Mobile number, but have indicated that you don\'t have one. Please untick the box or clear the Mobile number field.'
					},
					'postcode': {
						required: 'Please enter your postcode.',
						postalcode: 'Please enter a full postcode.'
					},
					'postcodepca': {
						required: 'Please enter your postcode.',
						postalcodepca: 'Please enter a valid postcode.',
						minlength: 'Please enter a valid postcode.',
						maxlength: 'Please enter a valid postcode.'
					},
					'clubcardpostcode': {
						required: 'Please enter your postcode.'
					},
					'address-option': {
						required: 'Please enter an address'
					},
					'landline' : {
						required: 'Please enter a daytime phone number.',
						telnumber: 'Please enter a daytime phone number with at least 10 digits including the dialling code.'
					},
					'dayphone' : {
						required: 'Please enter a daytime phone number.',
						telnumber: 'Please enter a daytime phone number with at least 10 digits including the dialling code.'
					},
					'dayphone0' : {
						required: 'Please add a day phone number for this address.',
						telnumber: 'Please enter a daytime phone number with at least 10 digits including the dialling code.'
					},
					'dayphone-0' : {
						required: 'Please add a day phone number for this address.',
						telnumber: 'Please enter a daytime phone number with at least 10 digits including the dialling code.'
					},
					'eveningphone' : {
						required: 'Please enter an evening phone number.',
						telnumber: 'Please enter an evening phone number with at least 10 digits including the dialling code.'
					},
					'eveningphone0' : {
						required: 'Please add an evening phone number for this address.',
						telnumber: 'Please enter an evening phone number with at least 10 digits including the dialling code.'
					},
					'eveningphone-0' : {
						required: 'Please add an evening phone number for this address.',
						telnumber: 'Please enter an evening phone number with at least 10 digits including the dialling code.'
					},
					'mobilephone' : {
						required: 'Please enter a mobile number.',
						telmobile: 'Please enter a mobile phone number with 11 digits, and starting with 07.'
					},
					'mobilephone-0' : {
						required: 'Please add a mobile number for this address.',
						telmobile: 'Please enter a mobile phone number with 11 digits, and starting with 07.'
					},
					'altphone':'Please enter a valid phone number.',
					'altphone-pri':'Please enter a valid phone number.',
					'altphone-sec':'Please enter a valid phone number.',
					'address-nickname' : {
						required: 'Please enter a nickname for that address.',
						namechk: 'Sorry, you\'ve entered invalid characters. Please try again.'
					},
					'cardholder' : {
						required: 'Please enter the cardholder\'s name.',
						namechk: 'Sorry, you\'ve entered invalid characters. Please try again.'
					},
					'property-type':'Please select a property type from the list.',
					'title':'Please choose your title from the list.',
					'title-1':'Please choose your title from the list.',
					'firstname' : {
						required: 'Please enter your first name.',
						newNameChk: 'Please enter your name using letters a to z and hyphen (-) only. Surname can also use apostrophe (\').'
					},
					'ordernumber' : {
						required: 'Please enter your order number.'
					},				
					'claimrelateoptions' : {
						required: 'Please select claim relate option.'
					},
					'sellerdiroptions' : {
						required: 'Please select an option.'
					},
					
					'claimvalue' : {
						calimval:'Please enter valid claim value'
					},
					'sellerdiroptionsdatepicker' : {
						dateChk: 'Please enter the correct date'
					},
					'firstName-0' : {
						required: 'Please add a first name for this address.',
						newNameChk: 'Please enter your name using letters a to z and hyphen (-) only. Surname can also use apostrophe (\').'
					},
					'firstName-1' : {
						required: 'Please add a first name for this address.',
						newNameChk: 'Please enter your name using letters a to z and hyphen (-) only. Surname can also use apostrophe (\').'
					},
					'firstName-2' : {
						required: 'Please add a first name for this address.',
						newNameChk: 'Please enter your name using letters a to z and hyphen (-) only. Surname can also use apostrophe (\').'
					},
					'firstName-3' : {
						required: 'Please add a first name for this address.',
						newNameChk: 'Please enter your name using letters a to z and hyphen (-) only. Surname can also use apostrophe (\').'
					},
					'first-name-1' : {
						required: 'Please enter your first name.',
						newNameChk: 'Please enter your name using letters a to z and hyphen (-) only. Surname can also use apostrophe (\').'
					},
					'lastname' : {
						required: 'Please enter your last name.',
						newNameChk: 'Please enter your name using letters a to z and hyphen (-) only. Surname can also use apostrophe (\').'
					},
					'lastName-0' : {
						required: 'Please add a last name for this address.',
						newNameChk: 'Please enter your name using letters a to z and hyphen (-) only. Surname can also use apostrophe (\').'
					},
					'lastName-1' : {
						required: 'Please add a last name for this address.',
						newNameChk: 'Please enter your name using letters a to z and hyphen (-) only. Surname can also use apostrophe (\').'
					},
					'lastName-2' : {
						required: 'Please add a last name for this address.',
						newNameChk: 'Please enter your name using letters a to z and hyphen (-) only. Surname can also use apostrophe (\').'
					},
					'lastName-3' : {
						required: 'Please add a last name for this address.',
						newNameChk: 'Please enter your name using letters a to z and hyphen (-) only. Surname can also use apostrophe (\').'
					},
					'lastName0' : {
						required: 'Please add a last name for this address.',
						newNameChk: 'Please enter your name using letters a to z and hyphen (-) only. Surname can also use apostrophe (\').'
					},
					'last-name-1' : {
						required: 'Please enter your last name.',
						newNameChk: 'Please enter your name using letters a to z and hyphen (-) only. Surname can also use apostrophe (\').'
					},
					'initial' : {
						namechk: 'Sorry, you\'ve entered invalid characters. Please try again.'
					},
					'screenname': {
						minlength: 'Please choose a screen name that is at least six characters. This will be displayed if you write a product review',
						maxlength: 'Please choose a screen name that is at least six characters. This will be displayed if you write a product review',
						screenName: 'We do not accept commas, double quote marks or angle brackets in screen name. Please add your screen name again without these characters.'
					},
					'spclInstruction0': {
						namechk: 'Sorry, you\'ve entered invalid characters. Please try again.'
					},
					'spclInstruction1': {
						namechk: 'Sorry, you\'ve entered invalid characters. Please try again.'
					},
					'spclInstruction2': {
						namechk: 'Sorry, you\'ve entered invalid characters. Please try again.'
					},
					'spclInstruction3': {
						namechk: 'Sorry, you\'ve entered invalid characters. Please try again.'
					},
					'address':'Choosing your address is mandatory',
					'claimtype':'Choosing claim type is mandatory',
					'claimreason':'Choosing claim reason is mandatory',
					'address-selector':'Please select your address.',
					'addressnickname' : {
						required: 'Please enter a nickname for this address.',
						namechk: 'Sorry, you\'ve entered invalid characters. Please try again.'
					},
					'addresslabel':'Please enter a nickname for this address.',
					'terms':'Please tick the box to confirm you agree to the terms and conditions.',
					'cardtype':'Please select a card type',
					
					'recipient-email':'Please enter the recipient&#39;s email address',
					'email-adr':{
						required: 'Please enter your email address.',
						email: 'Please enter a valid email address'
					},
					'recipient-first-name':'Please enter the recipient&#39;s first name',
					'email-msg':'Please compose a message',
					'store-finder-postalcode': 'Sorry we are unable to find this postcode. Please try again.',
					'dobyear': 'You must be over the age of 18 to purchase some items in your basket',
					'dobmonth': 'You must be over the age of 18 to purchase some items in your basket',
					'dobday': 'You must be over the age of 18 to purchase some items in your basket',
					'old-email' : {
						required: 'Please enter your old email address.'
					},
					'cardnumber': {
						required:'Please enter your credit card number'
					},
					'expiryRequired': {
						required:'Please select both an expiry month and year'
					},
					'expirydatemonth': {
						required:'Please select both an expiry month and year'
					},
					'expirydateyear': {
						required:'Please select both an expiry month and year'
					},
					'address-option' : {
						required: 'Please select your billing address'
					}
				},
				rules: {
					'register-emailconfirm': {
						equalTo: '#register-email'
					},
					'password':{
						minlength: 8,
						maxlength: 15
					},
					'oldpass':{
						minlength: oldPassMin,
						maxlength: oldPassMax
					},
					'newpass':{
						minlength: parseInt($("#change-password #hdnnewpassLength").data('min')),
						maxlength: parseInt($("#change-password #hdnnewpassLength").data('max')),
						enhancedPassword: true
					},
					'confirmpass': {
						equalTo: '#password'
					},
					'confirmnewpass': {
						equalTo: '#newpass'
					},
					'clubcard': {
						'clubcardnumber': true,
						required: '#noclubcard:not(:checked)'
					},
					/*'itemnumber': {
						required: '#claimrelateoptionsitems:checked'
					},*/					
					noclubcard: {
						required: function(element) {
							if ($(element).is(':checked') && $('#clubcard').val()) {
								return true;
							}
							return false;
						}
					},
					'clubcardpostcode': 'postalcode',
					'store-finder-postalcode': 'postalcode',
					'screenname': {
						minlength: 6,
						maxlength: 16
					},
					'couponcode': 'couponcode',
					'address-option':{
						required: true
					},
					'confirm-email': {
						equalTo : '#new-email'
					},
					'postcodepca': {
						required: true,
						'postalcodepca': true,
						minlength: 3,
						maxlength: 8
					},
										
					'mobilephone0': 'telmobile',
					'mobilephone-sec': 'telmobile',
					'altphone':{
					//	required: "#no-mobile:checked",
						'telnumber': true
					},
					'altphone-pri':{
						//required: "#no-mobile-1:checked",
						'telnumber': true
					},
					'altphone-sec':{
						//required: "#no-mobile-2:checked",
						'telnumber': true
					},
					'to1': 'rangecheck',
					'dobyear': {
						required: true,
						'ageverification': true
					},
					'dobmonth': {
						required: true,
						range: [1, 12]
					},
					'dobday': {
						required: true,
						range: [1, 31]
					},
					'cardissue': {
						minlength: 3,
						maxlength: 3,
						digits: true
					},
					'cardseccode-new': {
						digits: true
					},
					'expirydatemonth' : {
						'expiryRequired': true,
						required: true
					},
					'expirydateyear' : {
						'expiryRequired': true,
						required: true
					}
				},
				groups: {
					ageverification: 'dobday dobmonth dobyear',
					expiryRequired: 'expirydatemonth expirydateyear'
				},
				success: function(label){
					var corrected = label.attr('for');
					//$(label + '.invalid[for=' + corrected + ']').remove();
					$('label.invalid[for=' + corrected + ']').remove();
				},
				showErrors: function(errorMap, errorList){
					this.defaultShowErrors();
					insertTooltip();
					if ($(this.currentForm).hasClass('no-generic-message') == false)
						var totErr=($('.req-auth label.invalid').length);
					if(totErr > 1){
						$('.page-error p').text("There are " + totErr + " errors that require your attention before you can proceed");
						$('.submit-error').css('display', 'block');
						//alert(totErr);
					} else if(totErr === 1){
						$('.page-error p').text("There is " + totErr + " error that requires your attention before you can proceed");
						$('.submit-error').css('display', 'block');
						//alert(totErr);
					}
					else{
						$('.page-error').hide();
					}
					
					/*if($('form#price-range').length){
						rangeError();
					}*/
				}
			});
		});
	}
});

$(document).ready(function() {
	TESCO.Authentication.init();
	if ($('.pwd-input-tip').length) {
		$('.pwd-input-tip').html("Your password must be a minimum of eight characters and contain three of the following: <br/> - One uppercase character <br /> - One lowercase character <br /> - One special character e.g. !, ?, &pound;, $, # <br /> - One number");
	}
});